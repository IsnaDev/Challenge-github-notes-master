### Estrutura
Definição comum de uma função.
Variáveis criadas dentro de uma função apenas podem ser utilizadas dentro dela.
Quando invocamos o return, a função para ser executada.

    function nome(parametros){
        instruções
        return; => valor de retorno
    }


#### Função anônima
Funções que representam expreções.
Uma variável pode armazenar uma função.

    const soma = function(a, b){
        return a + b;
    }

    soma(1, 2) => retorna 3
    soma(5, 4) => retorna 9


#### Função autoinvocável
IIFE (Immediately Invoked Function Expression)
Uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada.

    (
    function(){
        let nam = "DIO"
        return name
    }
    )();

    => retorna DIO

Também pode ser utilizada com parâmetros ou armazenada em uma variável.

(
    function(a, b){
        return a + b
    }
    )(1, 2);

    => retorna 3


    const soma = (
        function(){
            return a + b;
    }
    )(1, 2);

    console.log(soma)

    => retorna 3

    #### Callbacks
    Uma função passada como argumento para outra.
    Utilizando callbacks, você tem maior controle da ordem de chamadas.

    const calc = function(operacao, num1, num2){
        return operacao(num1, num2);
    }

    const soma = function(num1, num2){
        return num1 + num2;
    }

    const sub = function(num1, num2){
        return num1 - num2;
    }

    const resultsoma = calc(soma, 1, 2);
    const resultsub = calc(sub, 1, 2);

    console.log(resultsoma);    => retorna 3
    console.log(resultsub);     => retorna -1

