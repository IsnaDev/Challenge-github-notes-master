### React
Uma biblioteca JavaScript para criar interfaces de usuários. E não é framework.
A principal função é a criação da interface para o usuário.
React é uma linguagem declarativa (só se preocupa com a interface do usuário).
O React está preocupado apenas com o que é exibido na interface do usuário.
Pode ser utilizado em qualquer lugar (banck-end, front-end, celulares).
React é baseado em componentes.


Criado em 2011 por Jordan Walke no Facebook;
Baseado no XHP, um framework para a criação de HTML no PHP;
Utilizado no mural de nóticias da ferramenta;
Utilizado no instagram em 2012;
Anunciado para liberação OpenSource na JSConf uS em 2015;
React native e UWP (Universal Windows Platform) (2015);

### LSX
const element = <h1>hello World</h1>
Nem Html e nem string

React não sepra as tecnologias colocando marcação em arquivos separados, e sim separa conceitos e
mantém o código pouco acoplado chamandos-os de componentes.
Não é obrigatório a utilização JSX.
Syntax Suggar para React.createElement
O browser não interpreta o JSX, para isso é necessário um transpilador para a aplicação
possa entender o codigo. O mais utilizado é o Babel.

### Rederização
Rederização de elementos;
React DOM;
React "pensa" em como a interface deve estar a cada momento ao invés de alterá-la com o tempo,
o que faz ter ganho de performance e evitar uma série de erros.

#### Componentes e props
Função e classe;
Props;
Composição e extração de componentes.

#### Estado e ciclo de vida
Inicialização => props e state
Montagem => componentWillMount, render, componentDidmount
Atualização
    Props => componentWillRecentiveProps, shouldComponentUpDate, componentWillUpDate, render, componentDidUpDate
    State => shouldComponentUpDate, componentWillUpDate, render, componentDidUpDate
Desmontagem => componentWillUnmount

Nenhum componente pai ou filho devem saber se outro componente possui estado ou não.
O estado é apenas local ao componente e caso seja necessário enviar algum atributo para outro então é feito via props.


#### Webpack
É um module bundler - um empacotador de módulos para a aplicações JS.
Gerar bundler que será utilizado no HTML, em ES5.
Suporte: Fontes, CSS, imagens, HTML, JS, Plugins.

Entry - utilizando grafo, o webpack precisa de um ponto de entrada 
para buscar todos os módulos e dependências.
Output - é para determinar quais são os bundlers que webpack irá emitir.
Loaders - é para permitir que o webpack gerencie arquivos não JavaScript
Plugins - plungins podem ser utilizados para otimização de pacotes, minificação, injeção de script e muito mais.
Mode - utilizados para abordagem de configuração zero. É possível configurar 
módulos como production, development ou nome.
Production - trás otimizações internas
Development - é executado com três plungins: UglifyJsPlugin, ModuleConcatenationPlugin e NoEmitOnErrorsPlugin.

criação do arquivo webpack.config.js:
npm i -D webpack-ciclo
    "build": "webpack --mode production"
npm i @babel/core babel-loader @babel/preseténv @babel/preset-react --save-deve
npm i react react-dom
npm i -D babel-present-react
    {
        "presets": [
            "Ababel/preset-env",
            "@babel/present-react"
        ]
    }

src/index.js
src/App.JSX
import React from "react";
import ReactDOM from "react-dom";
import App from"/App";
ReactDOM.render(<App />, document.getElmentById("app"));
npm i -D html-webpack-plungin html-loader
src/index.html

Criando um Dev Server
npm i -D webpack-dev-Server
"scripts": {
    "start:dev": "webpack-dev-server"
}

### EsLint
npm install --save-dev eslint babel-eslint eslint-plugin-react eslint-watch

#### Renderização condicional
Em react, pode criar componentes distintos que encapsulam o comportamento que você precisa.
Então, você pode renderizar apenas alguns dos elementos, dependendo do estado da sua aplicação.

Variáveis de elementos;
If inline com o operador lógico &&;
If inline com operador condicional;
Evitando que o componente seja renderizado.

#### Listas e chaves
Renderizando múltiplos componentes;
Componentes de lista básico;
Chaves;
Extraindo componentes com chaves;
Chaves devem ser únicas apenas entre elementos irmãos.

#### Manipulando eventos
Manipular eventos em elementos React é muito sememlhante a manipular eventos em elementos do DOM.
Existem algumas diferenças sintáticas:
Eventos em React são nomeados usando CamelCase ao invés de letras minúsculas;
Com o JSX você passa uma função como manipulador de eventos ao invés de um texto.

#### Pensando do jeito React
Comece com um Mock;
Separe a UI em uma hierarquia de componentes;
Crie uma versão estática de componentes;
Identifique a representação mínima, mas completa do State sa UI;
Identifique onde o State deve ficar; 
Adicione o fluxo de dados inverso.