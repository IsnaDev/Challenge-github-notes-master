### Protocolo HTTP
HyperText Transfer Protocol (HTTP)

• Definido pelos RFCs 1945 e 2116;
• É um protocolo de comunicação;
• Browser -> implementa o cliente HTTP;
• Servidor -> host objetos web (hospedar);
• Cliente
    Mensagens - Request HTTP (requisitar)

• Servidor
    Mensagens – Response HTTP (responder)

#### Mensagens HTTP

• Tipos: request & response

#### Request
O texto é em ASCII

Exemplo de Request:
Get: /somedir/page.html (método HTTP) HTTP/1.1 (versão) => (request line - texto em ASCII)
Host: www.someschool.edu (URL) => (👈🏻 header line 👇🏻)
Connection: close (tipo de conexão)
User-agent: Mozilla/5.0 (agente)
Accept-language: fr (preferência do cliente)

Métodos mais utilizados: GET e POST

GET: solicita um recurso do servidor (método seguro)*
HEAD: GET sem corpo de resposta (método seguro)*
POST: submete uma entidade a um recurso
PUT: substituição de recursos pelos dados da requisição
DELETE: remoção de um recurso
TRACE: chamada de loop-back a um determinado recurso / diagnóstico da rede
OPTION: opções de comunicação com recurso (método seguro)*
CONNECT: tunelamento identificado pelo recurso
PATCH: modificação parcial (RFC 5789)

*Metodos seguros = não modifica o estado do servidor quando são executados
GET, HEAD e OPTION => operação de leitura (read-only)

#### Response

Exemplo de response:
HTTP/1.1 200 OK  (status line)
Connection: close (👈🏻 header line 👇🏻)
Date: Tue, 09 Aug 2011 15:44:04 GMT
Server: Apache/2.2.3 (CentOS)
Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT
Content-Length: 6821
Content-Type: text/html
(data ... Update Succeed) (entity body)

##### Mensagens HTTP - Response

STATUS LINE
HTTP/1.1 200 OK 
• Versão do protocolo;
• Status code;
• Status da mensagem:
    200 OK: request bem sucedida e objeto enviado
    301 Moved Permanently: objeto realocado nova URL no campo Location
    400 Bad Request: resposta genérica - servidor não entendeu a mensagem
    404 Not Found: o documento solicitado é inexistente
    505 HTTP Version Not Supported: versão do protocolo não suportada pelo servidor

##### Classificação dos Status Code

• Information response (100 – 199);
• Successful response (200 – 299);
• Redirection response (300 – 399);
• Client error response (400 – 499);
• Server error response (500 – 599).

##### Web Distributed Authoring and Versioning (WebDav)

• 102 – Processing;
• 207 – Multi-status;
• 208 – Already Reported;
• 422 – Unprocessable Entity;
• 423 – Locked;
• 424 – Failed Dependency.

• Webpage Meta: Add, deletar, retrieve
• Link pages
• Criação de conj. de documentos
• Copy e move
• Lock: documento editado - 1

##### Mensagens HTTP - Response

HEADER LINE
Connection: close
Date: Tue, 09 Aug 2011 15:44:04 GMT
Server: Apache/2.2.3 (CentOS)
Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT
Content-Length: 6821
Content-Type: text/html

• Conexão encerrada;
• Dados da mensagem: Data, servidor, ...;
• Content-type: Tipo de dado.

ENTITY
(data , data, ....)

• Request Method & Status Code;
Campos:
• Entity Header (Definições - campo: Accept e Content)
• Entity Body

HTTP Entity Body: XML - JSON
Armazenamento, transmissão e reconstrução

XML: serialization, comunicação e metadados
JSON: Lightweight, independente de linguaguem e simples.

Comum (XML e JSON):
• Auto-descritivos;
• Hierárquicos;
• Independentes de linguagem de programação;
• Vasta utilização.

Diferenças (XML e JSON):
• tags;
• sucinto;
• legibilidade;
• utilização de arrays.

Por qual optar?
Tecnologia, complexidade, aplicações leves e metadados.

Transmission Control Protocol - TCP

### O que são Cookies?

Pequenos pedaços ou blocos de dados criados e utilizados pelo
servidor para persistir dados no dispositivo do cliente.

Especificação: RFC 6265

Request HTTP (primeiro acesso)
user ID (Acesso ao back-end DB)
Header Set-Cookie: ID
Responde

Cookies de persistentes (login permanece acessado)
Cookies de sessão (são apagados da memória quando é encerrada a sessão)
Manter logins ativos;
Carrinho de ecommerce;
Informação de website.

Hacking
LGPD & Cookies
Cookies e Privacidade

#### HTTP 1.1
Envio de até 6 request simultâneamente e aguarda os 6 request
Repetição de dados
Foco: css/js e gzip (para minimizar o tamanho para ter uma transmissão mais eficiente)
caching
HOL - head of line blocking (faz apenas uma request e aguarda um response)

###### Web Cache?
Entidade
Web Cache
Proxy server
    Redução do tempo de resposta
    Redução do tráfego

#### HTTP 2.0
Multiplexação
    GET main.html (stream 1) - Priorização de recursos! --->
    GET main.js(stream 2)   --->
    GET img.jpg (stream 3)  --->
push
    GET main.html (stream 1)--->
    RESPONSE main.html      <---
    PUSH main.js            <---
    PUSH img.jpg            <---

Melhorias:
• Única conexão persistente;
• Compressão de header; (reutilização do header)
• Server push; (o cliente precisa ter o suporte para usar o push)
• HTTPS por padrão - TLS (ultima versão do SSA);
• Negociação no handshake. (verificar se o cliente suporta a versãoo HTTP 2.0)

CONTRAS
PUSH
    • Configuração incorreta
Mixe 1.1 e 2.0
    • Lentidão
    • Load balancer – HTTP 1.1

#### Servidores/Sistemas

##### Apache - HTTP SERVER PROJECT
• Datado de 1995;
• Contribuição c/ WWW;
• Opensource & free;
• Comunidade:
    Apache Software Foundation

Características:
• Modular, dinâmico e carrefável;
• Multiple Request Processing modes (MPMs); altamente escalável
• Altamente escalável (+ 10,000 conexõessimultâneas - fácil);
• Lida com arquivos estáticos, index, auto-indexing e negociação de conteúdo
• TLS/SSL via OpenSSL ou wolfSSL;
• Servidores virtuais com endereços baseados em IP ou nome;
• Compatibilidade com IPV6;
• Suporte à versão 2.0 do HTTP;
• Proxy reverso, websocket ...


##### Xampp

Pacote/ambiente

• Apache server
• MariaDB
• Interpretadores script – PHP/Perl

Alguns módulos: OpenSSL, phpMyAdmin, MediaWki, Joo mla, Wordpress ...

##### NGINX

Servidor / 2004

• Web server;
• Proxy reverso;
• Load balancer;
• Mail proxy;
• HTTP cache;

Recursos:
• + 10mil conexõessimultâneas;
• Lida com arquivos estáticos, index, auto-indexing;
• Proxy reverso;
• Load balance;
• TLS/SSL com SNI via OpenSSL;
• Suporte à HTTP 2.0;
• Compatível com IPV6;
• FastCGI SCGI, uWSGI com cache;
• Suporte a gRPC (v. 1.13.10);
• Servidores virtuais baseados em IP e nome;
• WebSocket desde 1.3.13;
• URL rewriting and redirection[35][36].